openapi: 3.0.0
info:
  title: ToDo List API
  version: '1.0'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the user.
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          format: email
          description: The email address of the user. This field is unique.
        email_verified_at:
          type: string
          format: date-time
          description: The date and time when the user's email was verified. This field is nullable.
          nullable: true
        password:
          type: string
          description: The hashed password of the user.
        remember_token:
          type: string
          description: A token used to remember the user's session.
          nullable: true
        created_at:
          type: string
          format: date-time
          description: The date and time when the user was created.
        updated_at:
          type: string
          format: date-time
          description: The date and time when the user was last updated.
      required:
        - name
        - email
        - password
    Task:
      type: object
      description: Represents tasks with its details and subtasks.
      properties:
        id:
          type: integer
          description: The unique identifier of the task.
        user_id:
          type: integer
          description: ID of the user.
        parent_id:
          type: integer
          description: The ID of the parent task, if any.
        title:
          type: string
          description: The title of the task.
        description:
          type: string
          description: A detailed description of the task.
        status:
          type: string
          description: The current status of the task.
        priority:
          type: integer
          description: The priority level of the task.
        completed_at:
          type: string
          format: date-time
          description: The date and time when the task was completed.
        subtasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          description: A list of subtasks associated with this task.
      required:
        - id
        - title

    CreateTaskDTO:
      type: object
      description: Data Transfer Object for creating a new task
      properties:
        title:
          type: string
          description: The title of the task
          example: Buy groceries
        status:
          type: string
          description: The status of the task
          example: todo
          default: todo
        priority:
          type: integer
          description: The priority level of the task
          example: 1
          default: 1
        parent_id:
          type: integer
          description: The ID of the parent task, if any
          nullable: true
          example: null
        description:
          type: string
          description: A detailed description of the task
          nullable: true
          example: Buy milk, eggs, and bread
        completed_at:
          type: string
          format: date-time
          description: The date and time when the task was completed
          nullable: true
          example: 2024-08-01T12:00:00Z
      required:
        - title

    UpdateTaskDTO:
      type: object
      description: Data Transfer Object for updating an existing task
      properties:
        title:
          type: string
          description: The title of the task
          nullable: true
          example: Buy groceries
        status:
          type: string
          description: The status of the task
          nullable: true
          example: todo
          default: todo
        priority:
          type: integer
          description: The priority level of the task
          nullable: true
          example: 1
          default: 1
        description:
          type: string
          description: A detailed description of the task
          nullable: true
          example: Buy milk, eggs, and bread
        parent_id:
          type: integer
          description: The ID of the parent task, if any
          nullable: true
          example: null
        completed_at:
          type: string
          format: date-time
          description: The date and time when the task was completed
          nullable: true
          example: 2024-08-01T12:00:00Z

    ChangeTaskStatusDTO:
      type: object
      description: Data Transfer Object for changing the status of a task
      properties:
        status:
          type: string
          description: The new status of the task
          example: done
        completed_at:
          type: string
          format: date-time
          description: The date and time when the task was completed
          nullable: true
          example: 2024-08-01T12:00:00Z
      required:
        - status

    TaskResponseDTO:
      type: object
      description: The object with response after proceeding requests

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: The title of the task. This field is required.
          example: Complete project report
        description:
          type: string
          description: A detailed description of the task. This field is optional.
          example: The report should include all recent project developments.
        priority:
          type: integer
          description: The priority level of the task (1-5). This field is optional and will be set by default 1.
          example: 3
        status:
          type: string
          description: The current status of the task (todo, done). This field is optional and will be set by default todo.
          example: todo
        parent_id:
          type: integer
          description: The ID of the parent task, if any. This field is optional.
          example: 5
      required:
        - title

    UpdateTaskRequest:
      type: object
      description: Request body for updating a task
      properties:
        title:
          type: string
          description: The title of the task
          nullable: true
          maxLength: 255
        description:
          type: string
          description: A detailed description of the task
          nullable: true
          maxLength: 255
        priority:
          type: integer
          description: The priority level of the task
          nullable: true
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        status:
          type: string
          description: The current status of the task
          nullable: true
          enum:
            - todo
            - done
        parent_id:
          type: integer
          description: The ID of the parent task, if any
          nullable: true

    ChangeTaskStatusRequest:
      type: object
      description: Request body for changing the status of a task
      properties:
        status:
          type: string
          description: The new status of the task
          enum:
            - todo
            - done
          example: todo
      required:
        - status

    ValidationError:
      type: object
      description: Validation error response
      properties:
        message:
          type: string
          description: Error message indicating what went wrong.
        errors:
          type: object
          description: Validation errors for each field.
          additionalProperties:
            type: array
            items:
              type: string

paths:
  /login:
    post:
      summary: Login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /logout:
    post:
      summary: Logout
      tags:
        - Authentication
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized
  /tasks:
    get:
      summary: Get a list of tasks
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter tasks by status
          schema:
            type: string
        - name: priority
          in: query
          description: Filter tasks by priority
          schema:
            type: integer
        - name: search
          in: query
          description: Search tasks by title or description
          schema:
            type: string
        - name: sort
          in: query
          description: Sort tasks by multiple fields and directions. Provide sorting as an object with field names and directions. You can sort by priority, created_at, completed_at
          schema:
            type: object
            properties:
              completed_at:
                type: string
                enum:
                  - asc
                  - desc
                description: Sort direction for the 'completed_at' field.
              created_at:
                type: string
                enum:
                  - asc
                  - desc
                description: Sort direction for the 'created_at' field.
            example:
              completed_at: desc
              created_at: asc
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  /tasks/show/{task}:
    get:
      summary: Show a specific task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: task
          in: path
          description: ID of the task to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request
        '404':
          description: Task not found
        '401':
          description: Unauthorized

  /tasks/store:
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        description: Create Task Request
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

  /tasks/update/{task}:
    put:
      summary: Update a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: task
          in: path
          description: ID of the task to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Update Task Request
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request
        '404':
          description: Task not found
        '401':
          description: Unauthorized

  /tasks/change-status/{task}:
    put:
      summary: Change the status of a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: task
          in: path
          description: ID of the task to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Change Task Status Request
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangeTaskStatusRequest'
      responses:
        '200':
          description: Task status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request
        '404':
          description: Task not found
        '401':
          description: Unauthorized

  /tasks/destroy/{task}:
    delete:
      summary: "Delete specified task"
      tags:
        - "Tasks"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "task"
          in: "path"
          description: "ID of the task to delete"
          required: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  success:
                    type: "boolean"
                    description: "Indicates if the operation was successful"
                  message:
                    type: "string"
                    description: "Operation message"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not Found"
